import { Extra, Markup } from "telegraf";

import {
    MENU_SCENARIO,
    DEFAULT_SCHEDULE_SCENARIO,
} from "@/constants/scenarios";
import {
    DEFAULT_PLATOON_SCHEDULE_SUCCESS,
    DEFAULT_PLATOON_SCHEDULE_FAILURE,
    DEFAULT_PLATOON_SCHEDULE_IS_CHOSEN,
} from "@/constants/metricaGoals";
import { GENERAL_CONTROLS } from "@/constants/controls";

import {
    resolveScheduleFromPlatoon,
    resolveAvailableDatesFromPlatoon,
    resolvePlatoons,
} from "@/resolvers/schedule";
import track from "@/resolvers/metricaTrack";
import { resolveReadUserSelection } from "@/resolvers/firebase";

import {
    ensureFromId,
    ensureFromIdAndMessageText,
    makeKeyboardColumns,
} from "@/helpers/scenes";
import createScene from "@/helpers/createScene";
import { formatHtmlScheduleResponse } from "@/helpers/schedule";

import { SceneHandler } from "@/typings";

type TSession = {
    defaultPlatoon: string;
};

const enterHandler: SceneHandler<TSession> = async ({
    from,
    reply,
    scene,
    session,
}) => {
    let platoon = "";
    const fromId = ensureFromId(from, reply);

    try {
        platoon = await resolveReadUserSelection(fromId, "defaultPlatoon");
        const platoons = resolvePlatoons();

        if (!platoons.includes(platoon)) {
            await reply(
                `–í—ã–±—Ä–∞–Ω –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∑–≤–æ–¥: ${platoon}. –°–º–µ–Ω–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`,
            );
            track(fromId, platoon, "–í—ã–±—Ä–∞–Ω –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∑–≤–æ–¥");
            return scene.enter(MENU_SCENARIO.MAIN_SCENE);
        }

        session.defaultPlatoon = platoon;

        await reply(`–í–∞—à –≤–∑–≤–æ–¥: ${platoon}`);
        track(fromId, platoon, "–í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–∑–≤–æ–¥–∞");
    } catch (exception) {
        // TODO: make correct exception handling
        await reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∑–≤–æ–¥");
        track(
            fromId,
            DEFAULT_PLATOON_SCHEDULE_FAILURE.MESSAGE,
            DEFAULT_PLATOON_SCHEDULE_FAILURE.GOAL,
        );

        // TODO: throw exception?
        return scene.enter(MENU_SCENARIO.MAIN_SCENE);
    }

    const platoonDatesControls = resolveAvailableDatesFromPlatoon(platoon);
    const controls = [
        ...makeKeyboardColumns(platoonDatesControls, 2),
        [GENERAL_CONTROLS.MENU],
    ];

    const markup = Extra.markup(Markup.keyboard(controls));
    return reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÖ", markup);
};

const messageHandler: SceneHandler<TSession> = async ({
    from,
    message,
    reply,
    replyWithHTML,
    scene,
    session,
}) => {
    const [fromId, messageText] = ensureFromIdAndMessageText(
        from,
        message,
        reply,
    );

    const platoon = session.defaultPlatoon;
    const platoonDates = resolveAvailableDatesFromPlatoon(platoon);

    if (!platoonDates.includes(messageText)) {
        return reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
            Extra.markup(Markup.resize(true)),
        );
    }

    track(fromId, messageText, DEFAULT_PLATOON_SCHEDULE_IS_CHOSEN.GOAL);

    try {
        const schedule = resolveScheduleFromPlatoon(platoon, messageText);

        track(
            fromId,
            DEFAULT_PLATOON_SCHEDULE_SUCCESS.MESSAGE,
            DEFAULT_PLATOON_SCHEDULE_SUCCESS.GOAL,
        );

        await replyWithHTML(
            formatHtmlScheduleResponse(platoon, messageText, schedule),
        );

        return reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
            Extra.markup(Markup.resize(true)),
        );
    } catch (exception) {
        await reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üßê");
        track(
            fromId,
            DEFAULT_PLATOON_SCHEDULE_FAILURE.MESSAGE,
            DEFAULT_PLATOON_SCHEDULE_FAILURE.GOAL,
        );
        // TODO: throw exception
    }

    return scene.enter(MENU_SCENARIO.MAIN_SCENE);
};

export default createScene({
    name: DEFAULT_SCHEDULE_SCENARIO.DATE_SCENE,
    enterHandler,
    messageHandler,
});
